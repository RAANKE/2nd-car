const int motorEnablePin = 10; // PWM pin for motor 2 speed control
const int motorPin1 = 9;      // Control pin 1 for motor 2
const int motorPin2 = 8;      // Control pin 2 for motor 2
#define STEPPER_PIN_1 3
#define STEPPER_PIN_2 4
#define STEPPER_PIN_3 5
#define STEPPER_PIN_4 6
int step_number = 0;
void motorControl(int speed, int dir1, int dir2); // Function prototype for motorControl()
void OneStep(bool dir); // Function prototype for stepper()
int us(int echopin);// ultrasonic function value in milimetre
int values(int degree);
int trig = 2;
int echo1 = 11;
int echo2 = 12;
int echo3 = 13;
int duration;
long distance;
int deg = 0;

void setup() {
  // Set motor control pins as outputs
  pinMode(STEPPER_PIN_1, OUTPUT);
  pinMode(STEPPER_PIN_2, OUTPUT);
  pinMode(STEPPER_PIN_3, OUTPUT);
  pinMode(STEPPER_PIN_4, OUTPUT);


  pinMode(motorEnablePin, OUTPUT);
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  Serial.begin(9600);

  pinMode(trig,OUTPUT);
  pinMode(echo1,INPUT);
  pinMode(echo2,INPUT);
  pinMode(echo3,INPUT);
}

void loop() {
  // Run motor 1 forward and motor 2 backward  // Motor 1 full speed, forward

  motorControl(255, HIGH, LOW);
  int a = us(echo1);
  Serial.print("distance1 :");
  Serial.println(a);
  int b = us(echo2);
  int c = us(echo3);
  Serial.print("distance2 :");
  Serial.println(b);
  Serial.print("distance3 :");
  Serial.println(c);
  int d = b + 10;
  int e= b - 10;
  if(a<800){
    if(c>d){
      while(a<2000){
        motorControl(200, HIGH, LOW);
        a = us(echo1);
        b = us(echo2);
        c = us(echo3);
        Serial.print("distance1 :");
        Serial.println(a);
        Serial.print("distance2 :");
        Serial.println(b);
        Serial.print("distance3 :");
        Serial.println(c);
        int d = b + 10;
        int e= b - 10;
        if (deg<90){
          int degree = 90-deg;
          deg = deg + degree;
          for(int a=0; a <= values(degree); a++){
            OneStep(true);
            delay(2);
          }
        }
      }
      motorControl(255, HIGH, LOW);
      for(int a=0; a <= values(deg); a++){
        OneStep(false);
        delay(2);
      }
    }
  }
  if(a<800){
    if(b>e){
      while(a<2000){
        motorControl(200, HIGH, LOW);
        a = us(echo1);
        b = us(echo2);
        c = us(echo3);
        Serial.print("distance1 :");
        Serial.println(a);
        Serial.print("distance2 :");
        Serial.println(b);
        Serial.print("distance3 :");
        Serial.println(c);
        int d = b + 10;
        int e= b - 10;
        int f = -90;
        if (deg>f){
          int degree = 90+deg;
          deg = deg - degree;
          for(int a=0; a <= values(degree); a++){
            OneStep(false);
            delay(2);
          }
        }
      }
      motorControl(255, HIGH, LOW);
      for(int a=0; a <= values(deg); a++){
        OneStep(true);
        delay(2);
      }
    }
  }
}
// Function to control the motor
void motorControl(int speed, int dir1, int dir2) {
  analogWrite(motorEnablePin, speed);  // Set the motor speed using PWM
  digitalWrite(motorPin1, dir1); // Set the motor direction
  digitalWrite(motorPin2, dir2); // Set the motor direction
}
int values(int degree) {
  const float b=degree/10;
  const float e = b/36;
  const int y = e*2048;
  const int c = y*2;
  return y;
}
void OneStep(bool dir){
    if(dir){
switch(step_number){
  case 0:
  digitalWrite(STEPPER_PIN_1, HIGH);
  digitalWrite(STEPPER_PIN_2, LOW);
  digitalWrite(STEPPER_PIN_3, LOW);
  digitalWrite(STEPPER_PIN_4, LOW);
  break;
  case 1:
  digitalWrite(STEPPER_PIN_1, LOW);
  digitalWrite(STEPPER_PIN_2, HIGH);
  digitalWrite(STEPPER_PIN_3, LOW);
  digitalWrite(STEPPER_PIN_4, LOW);
  break;
  case 2:
  digitalWrite(STEPPER_PIN_1, LOW);
  digitalWrite(STEPPER_PIN_2, LOW);
  digitalWrite(STEPPER_PIN_3, HIGH);
  digitalWrite(STEPPER_PIN_4, LOW);
  break;
  case 3:
  digitalWrite(STEPPER_PIN_1, LOW);
  digitalWrite(STEPPER_PIN_2, LOW);
  digitalWrite(STEPPER_PIN_3, LOW);
  digitalWrite(STEPPER_PIN_4, HIGH);
  break;
} 
  }else{
    switch(step_number){
  case 0:
  digitalWrite(STEPPER_PIN_1, LOW);
  digitalWrite(STEPPER_PIN_2, LOW);
  digitalWrite(STEPPER_PIN_3, LOW);
  digitalWrite(STEPPER_PIN_4, HIGH);
  break;
  case 1:
  digitalWrite(STEPPER_PIN_1, LOW);
  digitalWrite(STEPPER_PIN_2, LOW);
  digitalWrite(STEPPER_PIN_3, HIGH);
  digitalWrite(STEPPER_PIN_4, LOW);
  break;
  case 2:
  digitalWrite(STEPPER_PIN_1, LOW);
  digitalWrite(STEPPER_PIN_2, HIGH);
  digitalWrite(STEPPER_PIN_3, LOW);
  digitalWrite(STEPPER_PIN_4, LOW);
  break;
  case 3:
  digitalWrite(STEPPER_PIN_1, HIGH);
  digitalWrite(STEPPER_PIN_2, LOW);
  digitalWrite(STEPPER_PIN_3, LOW);
  digitalWrite(STEPPER_PIN_4, LOW);
 
  
} 
  }
step_number++;
  if(step_number > 3){
    step_number = 0;
  }
}
// function of us:
int us(int echopin){
  int L[5];
  float sum = 0.0;
  for(int a=0; a <= 4; a++){
    digitalWrite(trig,LOW);
    delay(10);
    digitalWrite(trig,HIGH);
    delay(10);
    digitalWrite(trig,LOW);
    duration = pulseIn(echopin,HIGH);
    distance = 0.34*duration/2;
    L[a] = distance;
    sum = sum + distance;   
  }
  float x = sum/5;
  sum = 0;
  for(int i=0;i<=4;i++){
    float l = L[i]-x;
    float j =abs(l);
    sum = sum+j;
  }
  int o = sum/5;
  int z = 5;
  int ab=0;

    int j = o + 100;

  for(int i=0;i<=4;i++){
    int l = L[i]-x;
    float s = abs(l);
    ab = abs(ab+L[i]);
    if(s>j){
      z=z-1;
      ab = abs(ab- L[i]);
    }
  }
  distance = ab/z;
  return distance;
}
